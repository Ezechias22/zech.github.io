rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Règles pour les appels
    match /calls/{callId} {
      allow read, write: if request.auth != null && 
        (resource.data.callerId == request.auth.uid || 
         resource.data.receiverId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.callerId == request.auth.uid;
    }
    
    // Règles pour les utilisateurs
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Règles pour les autres collections existantes
    match /gift_transactions/{transactionId} {
      allow read: if request.auth != null && 
        (resource.data.senderId == request.auth.uid || 
         resource.data.receiverId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.senderId == request.auth.uid;
      allow update: if false; // Functions only
    }
    
    match /gift_items/{giftId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    match /user_balances/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if false; // Functions only
    }
    
    match /wallet_transactions/{transactionId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow write: if false; // Functions only
    }
    
    match /withdrawal_requests/{requestId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && isAdmin();
    }
    
    match /live_rooms/{liveId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (resource.data.hostId == request.auth.uid || 
         resource.data.participants[request.auth.uid] != null);
    }
    
    match /live_messages/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.resource.data.senderId == request.auth.uid;
      allow update, delete: if request.auth != null && 
        resource.data.senderId == request.auth.uid;
    }
    
    // Collections pour analytics et errors (Functions only)
    match /call_analytics/{analyticsId} {
      allow read: if request.auth != null;
      allow write: if false;
    }
    
    match /notification_errors/{errorId} {
      allow read: if request.auth != null && isAdmin();
      allow write: if false;
    }
    
    // Fonction utilitaire
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}