// lib/main.dart - VERSION SANS TESTS
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';

// üöÄ IMPORTS POUR LOVINGO
import 'firebase_options.dart';
import 'shared/themes/app_theme.dart';
import 'features/auth/login_screen.dart';
import 'config/webrtc_config.dart';
import 'features/calls/providers/call_provider.dart';
import 'core/services/call_notification_service.dart';
import 'core/services/auth_service.dart';

// ‚úÖ NAVIGATION GLOBALE POUR WEBRTC - D√âFINIE DANS MAIN.DART
final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

// ‚úÖ HANDLER GLOBAL POUR MESSAGES EN BACKGROUND (requis par Firebase)
@pragma('vm:entry-point')
Future<void> firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  debugPrint('üì± Message background handler: ${message.messageId}');
  
  if (message.data['type'] == 'incoming_call') {
    debugPrint('üìû Appel entrant en background de: ${message.data['caller_name'] ?? 'Inconnu'}');
  }
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  // üî• Initialiser Firebase
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  
  // ‚úÖ CONFIGURER FIREBASE MESSAGING D√àS LE D√âMARRAGE
  FirebaseMessaging.onBackgroundMessage(firebaseMessagingBackgroundHandler);
  
  // üöÄ INITIALISER WEBRTC LOVINGO
  try {
    await WebRTCConfig.initialize();
    debugPrint('‚úÖ WebRTC Lovingo initialis√© avec succ√®s');
  } catch (e) {
    debugPrint('‚ùå Erreur initialisation WebRTC: $e');
  }
  
  runApp(const ProviderScope(child: LovingoApp()));
}

class LovingoApp extends ConsumerStatefulWidget {
  const LovingoApp({super.key});

  @override
  ConsumerState<LovingoApp> createState() => _LovingoAppState();
}

class _LovingoAppState extends ConsumerState<LovingoApp> with WidgetsBindingObserver {
  
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    
    // ‚úÖ INITIALISER LES SERVICES IMM√âDIATEMENT
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _initializeNotificationServices();
    });
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    super.dispose();
  }

  // ‚úÖ INITIALISER LES SERVICES DE NOTIFICATIONS D√àS LE D√âMARRAGE
  Future<void> _initializeNotificationServices() async {
    try {
      debugPrint('üöÄ Initialisation des services de notifications...');
      
      final notificationService = ref.read(callNotificationServiceProvider);
      await notificationService.initializeBasicFCM();
      
      debugPrint('‚úÖ Services de notifications de base initialis√©s');
    } catch (e) {
      debugPrint('‚ùå Erreur initialisation services notifications: $e');
    }
  }

  // ‚úÖ INITIALISER LES SERVICES COMPLETS APR√àS CONNEXION
  Future<void> _initializeFullServices() async {
    try {
      debugPrint('üöÄ Initialisation des services complets...');
      
      await ref.read(callNotificationServiceProvider).initialize();
      ref.read(callProvider.notifier);
      
      debugPrint('‚úÖ Services d\'appels complets initialis√©s');
    } catch (e) {
      debugPrint('‚ùå Erreur initialisation services complets: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    // ‚úÖ √âCOUTER LES CHANGEMENTS D'AUTHENTIFICATION
    ref.listen(authServiceProvider, (previous, next) async {
      final previousUser = previous?.user;
      final currentUser = next.user;
      
      if (currentUser != null && previousUser == null) {
        // Utilisateur vient de se connecter
        debugPrint('üë§ Utilisateur connect√©: ${currentUser.name}');
        await _initializeFullServices();
      } else if (currentUser == null && previousUser != null) {
        // Utilisateur vient de se d√©connecter
        debugPrint('üë§ Utilisateur d√©connect√©');
        try {
          await ref.read(callNotificationServiceProvider).clearUserFCMToken();
        } catch (e) {
          debugPrint('‚ùå Erreur nettoyage token: $e');
        }
      }
    });

    // ‚úÖ √âCOUTER LES APPELS ENTRANTS GLOBALEMENT
    ref.listen(incomingCallProvider, (previous, next) {
      // L'√©coute est g√©r√©e automatiquement par le CallNotifier
    });

    return MaterialApp(
      title: 'Lovingo',
      theme: AppTheme.lightTheme,
      darkTheme: AppTheme.darkTheme,
      home: const LoginScreen(),
      navigatorKey: navigatorKey,
      debugShowCheckedModeBanner: false,
      routes: {
        '/login': (context) => const LoginScreen(),
      },
    );
  }

  // ‚úÖ G√âRER LES CHANGEMENTS D'√âTAT DE L'APP
  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);
    
    switch (state) {
      case AppLifecycleState.resumed:
        debugPrint('üì± App resumed - r√©activer services');
        _reactivateServices();
        break;
      case AppLifecycleState.paused:
        debugPrint('üì± App paused - maintenir √©coute appels');
        break;
      case AppLifecycleState.detached:
        debugPrint('üì± App detached');
        break;
      case AppLifecycleState.inactive:
        debugPrint('üì± App inactive');
        break;
      case AppLifecycleState.hidden:
        debugPrint('üì± App hidden');
        break;
    }
  }

  Future<void> _reactivateServices() async {
    try {
      await ref.read(callNotificationServiceProvider).updateUserFCMToken();
    } catch (e) {
      debugPrint('‚ùå Erreur r√©activation services: $e');
    }
  }
}